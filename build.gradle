buildscript {

    ext {
        kotlinVersion = '1.7.0'
        springBootVersion = '2.7.0'
        logstashLogbackVersion = '7.2'
        tokenSupportVersion = '1.3.9'
        gcpStorageVersion = "2.8.0"
    }

    repositories {
        mavenCentral()

        maven {
            url "https://maven.pkg.github.com/navikt/maven-release"
            credentials {
                username = "token"
                password = "$System.env.GITHUB_TOKEN"
            }
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("gradle.plugin.org.openrepose:gradle-jaxb-plugin:2.5.0")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id "org.owasp.dependencycheck" version "7.1.0.1"
    id 'com.adarshr.test-logger' version '3.2.0'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openrepose.gradle.plugins.jaxb'

group = 'no.nav.eessi.pensjon'
version = '0.0.1-SNAPSHOT'

configurations {
    xsd
}

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-actuator:${springBootVersion}")

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.springframework.kafka:spring-kafka:2.8.5'

    //Auth
    implementation("no.nav.security:token-client-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-jaxrs:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-test-support:${tokenSupportVersion}")

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'

    //eessi pensjon libs
    implementation("no.nav.eessi.pensjon:ep-logging:1.0.+")
    implementation("no.nav.eessi.pensjon:ep-metrics:0.4.+")


    //GCP
    implementation("com.google.cloud:google-cloud-storage:$gcpStorageVersion")
    implementation(platform("com.google.cloud:libraries-bom:25.4.0"))

    //mock - test
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.2")
    testImplementation("org.mock-server:mockserver-client-java:5.13.2")
    testImplementation("org.mock-server:mockserver-netty:5.13.2") {
        exclude module: 'junit'
    }
    testImplementation "io.mockk:mockk:1.12.4"

    // Architecture tests
    testImplementation 'com.tngtech.archunit:archunit:0.23.1'

    testImplementation("com.ninja-squad:springmockk:3.1.1")
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: "junit-vintage-engine"
    }

    testImplementation 'org.springframework.kafka:spring-kafka-test:2.8.5'
    testImplementation("io.findify:s3mock_2.13:0.2.6")

    //testcontainers
    testImplementation("org.testcontainers:junit-jupiter:1.17.3")
    testImplementation "org.testcontainers:testcontainers:1.17.3"

}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is required"

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}



repositories {

    mavenCentral()

    ["maven-release","ep-metrics"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }

}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    }
    revision = 'release'
}
